// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String
  username    String    @unique
  password    String
  avatar      String?
  linkedinurl String?
  githuburl   String?
  portfolio   String?
  skills      String[]
  createdAt   DateTime? @default(now())

  Project Project[]
  comment comment[]

  //chat
  sentMessages    Chat[]    @relation("SentMessages")
  receivedMessages    Chat[]    @relation("ReceivedMessages")
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  skills      String[]
  githuburl   String?
  liveurl     String?
  likeCount   Int       @default(0)
  images      String[]
  userid      Int
  User        User      @relation(fields: [userid], references: [id], onDelete: Cascade)
  comment     comment[]

  createdAt DateTime? @default(now())

  
}

model comment {
  id        Int       @id @default(autoincrement())
  comment   String?
  userid    Int
  User      User      @relation(fields: [userid], references: [id], onDelete: Cascade)
  projectid Int
  Project   Project   @relation(fields: [projectid], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
}

model Chat {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  timestamp  DateTime @default(now())

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User    @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
